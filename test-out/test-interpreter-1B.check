Executing root method HotSpotMethod<Test1$$anonfun$testB$1$Foo$2.bar>
val x0 = new Array[Object](11)
val x1 = new Array[Long](11)
val x2 = x0(3) = playground.interpreter.BytecodeInterpreter_Str@451e5b88
val x3 = x0(4) = HotSpotMethod<Test1$$anonfun$testB$1$Foo$2.bar>
val x4 = x0(5) = [Ljava.lang.Object;@4c0b612b
val x5 = new Array[Object](8)
val x6 = new Array[Long](8)
val x7 = x5(3) = playground.interpreter.Test1$$anonfun$testB$1$Foo$2@7f18750d
val x8 = unsafe.putInt(x6,56, 8)
RootCall HotSpotMethod<Test1$$anonfun$testB$1$Foo$2.bar> - (I)V
val x9 = block_0()
def block_0() { // *** begin block 0
0: getstatic
val x10 = if (null == null) class scala.Predef$ else null
val x11 = unsafe.getObject(x10,200)
val x12 = x5(5) = x11
3: new
val x13 = unsafe.allocateInstance(class scala.collection.mutable.StringBuilder)
val x14 = x5(6) = x13
6: dup
val x15 = unsafe.getLong(x6,72)
val x16 = x5(6)
val x17 = unsafe.putLong(x6,80, x15)
val x18 = x5(7) = x16
7: invokespecial
val x19 = x5(7)
val x20 = if (x19 == null) throw new NullPointerException() else x19
val x21 = new Array[Object](7)
val x22 = new Array[Long](7)
val x23 = { System.arraycopy(x5, 7, x21, 3, 1); System.arraycopy(x6, 7, x22, 3, 1) }
Call HotSpotMethod<StringBuilder.<init>> - ()V
val x24 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x25 = x21(3)
val x26 = x21(4) = x25
1: bipush
val x27 = unsafe.putInt(x22,64, 16)
3: ldc_w
val x28 = x21(6) = 
6: invokespecial
val x29 = x21(4)
val x30 = if (x29 == null) throw new NullPointerException() else x29
val x31 = new Array[Object](11)
val x32 = new Array[Long](11)
val x33 = { System.arraycopy(x21, 4, x31, 3, 3); System.arraycopy(x22, 4, x32, 3, 3) }
Call HotSpotMethod<StringBuilder.<init>> - (ILjava/lang/String;)V
val x34 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x35 = x31(3)
val x36 = x31(6) = x35
1: new
val x37 = unsafe.allocateInstance(class java.lang.StringBuilder)
val x38 = x31(7) = x37
4: dup
val x39 = unsafe.getLong(x32,80)
val x40 = x31(7)
val x41 = unsafe.putLong(x32,88, x39)
val x42 = x31(8) = x40
5: aload_2
val x43 = x31(5)
val x44 = x31(9) = x43
6: invokevirtual
val x45 = x31(9)
val x46 = if (x45 == null) throw new NullPointerException() else x45
val x47 = x31(9)
val x48 = HotSpotMethod<String.length>.invoke(x47)
val x49 = unsafe.putInt(x32,96, x48)
val x50 = block_9()
def block_9() { // *** begin block 9
9: iload_1
val x51 = unsafe.getInt(x32,56)
val x52 = unsafe.putInt(x32,104, x51)
10: iadd
val x53 = unsafe.getInt(x32,104)
val x54 = unsafe.getInt(x32,96)
val x55 = x53 + x54
val x56 = unsafe.putInt(x32,96, x55)
11: invokespecial
val x57 = x31(8)
val x58 = if (x57 == null) throw new NullPointerException() else x57
val x59 = new Array[Object](7)
val x60 = new Array[Long](7)
val x61 = { System.arraycopy(x31, 8, x59, 3, 2); System.arraycopy(x32, 8, x60, 3, 2) }
Call HotSpotMethod<StringBuilder.<init>> - (I)V
val x62 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x63 = x59(3)
val x64 = x59(5) = x63
1: iload_1
val x65 = unsafe.getInt(x60,56)
val x66 = unsafe.putInt(x60,72, x65)
2: invokespecial
val x67 = x59(5)
val x68 = if (x67 == null) throw new NullPointerException() else x67
val x69 = new Array[Object](7)
val x70 = new Array[Long](7)
val x71 = { System.arraycopy(x59, 5, x69, 3, 2); System.arraycopy(x60, 5, x70, 3, 2) }
Call HotSpotMethod<AbstractStringBuilder.<init>> - (I)V
val x72 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x73 = x69(3)
val x74 = x69(5) = x73
1: invokespecial
val x75 = x69(5)
val x76 = if (x75 == null) throw new NullPointerException() else x75
val x77 = new Array[Object](4)
val x78 = new Array[Long](4)
val x79 = { System.arraycopy(x69, 5, x77, 3, 1); System.arraycopy(x70, 5, x78, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x80 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x81 = Arrays.fill(x77, null)
} // *** end block 0
val x82 = returnValue
val x83 = block_4()
def block_4() { // *** begin block 4
4: aload_0
val x84 = x69(3)
val x85 = x69(5) = x84
5: iload_1
val x86 = unsafe.getInt(x70,56)
val x87 = unsafe.putInt(x70,72, x86)
6: newarray
val x88 = unsafe.getInt(x70,72)
val x89 = new Array[Char](x88)
val x90 = x69(6) = x89
8: putfield
val x91 = x69(6)
val x92 = x69(5)
val x93 = if (x92 == null) throw new NullPointerException() else x92
val x94 = if (x93 == null) class java.lang.AbstractStringBuilder else x93
val x95 = unsafe.putObject(x94,24, x91)
11: return
Ret HotSpotMethod<AbstractStringBuilder.<init>> - (I)V
val x96 = Arrays.fill(x69, null)
} // *** end block 4
} // *** end block 0
val x97 = returnValue
val x98 = block_5()
def block_5() { // *** begin block 5
5: return
Ret HotSpotMethod<StringBuilder.<init>> - (I)V
val x99 = Arrays.fill(x59, null)
} // *** end block 5
} // *** end block 0
val x100 = returnValue
val x101 = block_14()
def block_14() { // *** begin block 14
14: aload_2
val x102 = x31(5)
val x103 = x31(8) = x102
15: invokevirtual
val x104 = x31(7)
val x105 = if (x104 == null) throw new NullPointerException() else x104
val x106 = x31(8)
val x107 = Boolean.valueOf x106
val x108 = x31(7)
val x109 = HotSpotMethod<StringBuilder.append>.invoke(x108,x107)
val x110 = x31(7) = x109
val x111 = block_18()
def block_18() { // *** begin block 18
18: invokespecial
val x112 = x31(6)
val x113 = if (x112 == null) throw new NullPointerException() else x112
val x114 = new Array[Object](7)
val x115 = new Array[Long](7)
val x116 = { System.arraycopy(x31, 6, x114, 3, 2); System.arraycopy(x32, 6, x115, 3, 2) }
Call HotSpotMethod<StringBuilder.<init>> - (Ljava/lang/StringBuilder;)V
val x117 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x118 = x114(3)
val x119 = x114(5) = x118
1: aload_1
val x120 = x114(4)
val x121 = x114(6) = x120
2: putfield
val x122 = x114(6)
val x123 = x114(5)
val x124 = if (x123 == null) throw new NullPointerException() else x123
val x125 = if (x124 == null) class scala.collection.mutable.StringBuilder else x124
val x126 = unsafe.putObject(x125,16, x122)
5: aload_0
val x127 = x114(3)
val x128 = x114(5) = x127
6: invokespecial
val x129 = x114(5)
val x130 = if (x129 == null) throw new NullPointerException() else x129
val x131 = new Array[Object](4)
val x132 = new Array[Long](4)
val x133 = { System.arraycopy(x114, 5, x131, 3, 1); System.arraycopy(x115, 5, x132, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x134 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x135 = Arrays.fill(x131, null)
} // *** end block 0
val x136 = returnValue
val x137 = block_9()
def block_9() { // *** begin block 9
9: aload_0
val x138 = x114(3)
val x139 = x114(5) = x138
10: invokestatic
val x140 = new Array[Object](4)
val x141 = new Array[Long](4)
val x142 = { System.arraycopy(x114, 5, x140, 3, 1); System.arraycopy(x115, 5, x141, 3, 1) }
Call HotSpotMethod<GenTraversableOnce$class.$init$> - (Lscala/collection/GenTraversableOnce;)V
val x143 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenTraversableOnce$class.$init$> - (Lscala/collection/GenTraversableOnce;)V
val x144 = Arrays.fill(x140, null)
} // *** end block 0
val x145 = returnValue
val x146 = block_13()
def block_13() { // *** begin block 13
13: aload_0
val x147 = x114(3)
val x148 = x114(5) = x147
14: invokestatic
val x149 = new Array[Object](4)
val x150 = new Array[Long](4)
val x151 = { System.arraycopy(x114, 5, x149, 3, 1); System.arraycopy(x115, 5, x150, 3, 1) }
Call HotSpotMethod<TraversableOnce$class.$init$> - (Lscala/collection/TraversableOnce;)V
val x152 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<TraversableOnce$class.$init$> - (Lscala/collection/TraversableOnce;)V
val x153 = Arrays.fill(x149, null)
} // *** end block 0
val x154 = returnValue
val x155 = block_17()
def block_17() { // *** begin block 17
17: aload_0
val x156 = x114(3)
val x157 = x114(5) = x156
18: invokestatic
val x158 = new Array[Object](4)
val x159 = new Array[Long](4)
val x160 = { System.arraycopy(x114, 5, x158, 3, 1); System.arraycopy(x115, 5, x159, 3, 1) }
Call HotSpotMethod<Parallelizable$class.$init$> - (Lscala/collection/Parallelizable;)V
val x161 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Parallelizable$class.$init$> - (Lscala/collection/Parallelizable;)V
val x162 = Arrays.fill(x158, null)
} // *** end block 0
val x163 = returnValue
val x164 = block_21()
def block_21() { // *** begin block 21
21: aload_0
val x165 = x114(3)
val x166 = x114(5) = x165
22: invokestatic
val x167 = new Array[Object](4)
val x168 = new Array[Long](4)
val x169 = { System.arraycopy(x114, 5, x167, 3, 1); System.arraycopy(x115, 5, x168, 3, 1) }
Call HotSpotMethod<GenTraversableLike$class.$init$> - (Lscala/collection/GenTraversableLike;)V
val x170 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenTraversableLike$class.$init$> - (Lscala/collection/GenTraversableLike;)V
val x171 = Arrays.fill(x167, null)
} // *** end block 0
val x172 = returnValue
val x173 = block_25()
def block_25() { // *** begin block 25
25: aload_0
val x174 = x114(3)
val x175 = x114(5) = x174
26: invokestatic
val x176 = new Array[Object](4)
val x177 = new Array[Long](4)
val x178 = { System.arraycopy(x114, 5, x176, 3, 1); System.arraycopy(x115, 5, x177, 3, 1) }
Call HotSpotMethod<TraversableLike$class.$init$> - (Lscala/collection/TraversableLike;)V
val x179 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<TraversableLike$class.$init$> - (Lscala/collection/TraversableLike;)V
val x180 = Arrays.fill(x176, null)
} // *** end block 0
val x181 = returnValue
val x182 = block_29()
def block_29() { // *** begin block 29
29: aload_0
val x183 = x114(3)
val x184 = x114(5) = x183
30: invokestatic
val x185 = new Array[Object](4)
val x186 = new Array[Long](4)
val x187 = { System.arraycopy(x114, 5, x185, 3, 1); System.arraycopy(x115, 5, x186, 3, 1) }
Call HotSpotMethod<GenericTraversableTemplate$class.$init$> - (Lscala/collection/generic/GenericTraversableTemplate;)V
val x188 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenericTraversableTemplate$class.$init$> - (Lscala/collection/generic/GenericTraversableTemplate;)V
val x189 = Arrays.fill(x185, null)
} // *** end block 0
val x190 = returnValue
val x191 = block_33()
def block_33() { // *** begin block 33
33: aload_0
val x192 = x114(3)
val x193 = x114(5) = x192
34: invokestatic
val x194 = new Array[Object](4)
val x195 = new Array[Long](4)
val x196 = { System.arraycopy(x114, 5, x194, 3, 1); System.arraycopy(x115, 5, x195, 3, 1) }
Call HotSpotMethod<GenTraversable$class.$init$> - (Lscala/collection/GenTraversable;)V
val x197 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenTraversable$class.$init$> - (Lscala/collection/GenTraversable;)V
val x198 = Arrays.fill(x194, null)
} // *** end block 0
val x199 = returnValue
val x200 = block_37()
def block_37() { // *** begin block 37
37: aload_0
val x201 = x114(3)
val x202 = x114(5) = x201
38: invokestatic
val x203 = new Array[Object](4)
val x204 = new Array[Long](4)
val x205 = { System.arraycopy(x114, 5, x203, 3, 1); System.arraycopy(x115, 5, x204, 3, 1) }
Call HotSpotMethod<Traversable$class.$init$> - (Lscala/collection/Traversable;)V
val x206 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Traversable$class.$init$> - (Lscala/collection/Traversable;)V
val x207 = Arrays.fill(x203, null)
} // *** end block 0
val x208 = returnValue
val x209 = block_41()
def block_41() { // *** begin block 41
41: aload_0
val x210 = x114(3)
val x211 = x114(5) = x210
42: invokestatic
val x212 = new Array[Object](4)
val x213 = new Array[Long](4)
val x214 = { System.arraycopy(x114, 5, x212, 3, 1); System.arraycopy(x115, 5, x213, 3, 1) }
Call HotSpotMethod<Traversable$class.$init$> - (Lscala/collection/mutable/Traversable;)V
val x215 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Traversable$class.$init$> - (Lscala/collection/mutable/Traversable;)V
val x216 = Arrays.fill(x212, null)
} // *** end block 0
val x217 = returnValue
val x218 = block_45()
def block_45() { // *** begin block 45
45: aload_0
val x219 = x114(3)
val x220 = x114(5) = x219
46: invokestatic
val x221 = new Array[Object](4)
val x222 = new Array[Long](4)
val x223 = { System.arraycopy(x114, 5, x221, 3, 1); System.arraycopy(x115, 5, x222, 3, 1) }
Call HotSpotMethod<GenIterableLike$class.$init$> - (Lscala/collection/GenIterableLike;)V
val x224 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenIterableLike$class.$init$> - (Lscala/collection/GenIterableLike;)V
val x225 = Arrays.fill(x221, null)
} // *** end block 0
val x226 = returnValue
val x227 = block_49()
def block_49() { // *** begin block 49
49: aload_0
val x228 = x114(3)
val x229 = x114(5) = x228
50: invokestatic
val x230 = new Array[Object](4)
val x231 = new Array[Long](4)
val x232 = { System.arraycopy(x114, 5, x230, 3, 1); System.arraycopy(x115, 5, x231, 3, 1) }
Call HotSpotMethod<GenIterable$class.$init$> - (Lscala/collection/GenIterable;)V
val x233 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenIterable$class.$init$> - (Lscala/collection/GenIterable;)V
val x234 = Arrays.fill(x230, null)
} // *** end block 0
val x235 = returnValue
val x236 = block_53()
def block_53() { // *** begin block 53
53: aload_0
val x237 = x114(3)
val x238 = x114(5) = x237
54: invokestatic
val x239 = new Array[Object](4)
val x240 = new Array[Long](4)
val x241 = { System.arraycopy(x114, 5, x239, 3, 1); System.arraycopy(x115, 5, x240, 3, 1) }
Call HotSpotMethod<IterableLike$class.$init$> - (Lscala/collection/IterableLike;)V
val x242 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<IterableLike$class.$init$> - (Lscala/collection/IterableLike;)V
val x243 = Arrays.fill(x239, null)
} // *** end block 0
val x244 = returnValue
val x245 = block_57()
def block_57() { // *** begin block 57
57: aload_0
val x246 = x114(3)
val x247 = x114(5) = x246
58: invokestatic
val x248 = new Array[Object](4)
val x249 = new Array[Long](4)
val x250 = { System.arraycopy(x114, 5, x248, 3, 1); System.arraycopy(x115, 5, x249, 3, 1) }
Call HotSpotMethod<Iterable$class.$init$> - (Lscala/collection/Iterable;)V
val x251 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Iterable$class.$init$> - (Lscala/collection/Iterable;)V
val x252 = Arrays.fill(x248, null)
} // *** end block 0
val x253 = returnValue
val x254 = block_61()
def block_61() { // *** begin block 61
61: aload_0
val x255 = x114(3)
val x256 = x114(5) = x255
62: invokestatic
val x257 = new Array[Object](4)
val x258 = new Array[Long](4)
val x259 = { System.arraycopy(x114, 5, x257, 3, 1); System.arraycopy(x115, 5, x258, 3, 1) }
Call HotSpotMethod<Iterable$class.$init$> - (Lscala/collection/mutable/Iterable;)V
val x260 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Iterable$class.$init$> - (Lscala/collection/mutable/Iterable;)V
val x261 = Arrays.fill(x257, null)
} // *** end block 0
val x262 = returnValue
val x263 = block_65()
def block_65() { // *** begin block 65
65: aload_0
val x264 = x114(3)
val x265 = x114(5) = x264
66: invokestatic
val x266 = new Array[Object](4)
val x267 = new Array[Long](4)
val x268 = { System.arraycopy(x114, 5, x266, 3, 1); System.arraycopy(x115, 5, x267, 3, 1) }
Call HotSpotMethod<Function1$class.$init$> - (Lscala/Function1;)V
val x269 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Function1$class.$init$> - (Lscala/Function1;)V
val x270 = Arrays.fill(x266, null)
} // *** end block 0
val x271 = returnValue
val x272 = block_69()
def block_69() { // *** begin block 69
69: aload_0
val x273 = x114(3)
val x274 = x114(5) = x273
70: invokestatic
val x275 = new Array[Object](4)
val x276 = new Array[Long](4)
val x277 = { System.arraycopy(x114, 5, x275, 3, 1); System.arraycopy(x115, 5, x276, 3, 1) }
Call HotSpotMethod<PartialFunction$class.$init$> - (Lscala/PartialFunction;)V
val x278 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<PartialFunction$class.$init$> - (Lscala/PartialFunction;)V
val x279 = Arrays.fill(x275, null)
} // *** end block 0
val x280 = returnValue
val x281 = block_73()
def block_73() { // *** begin block 73
73: aload_0
val x282 = x114(3)
val x283 = x114(5) = x282
74: invokestatic
val x284 = new Array[Object](4)
val x285 = new Array[Long](4)
val x286 = { System.arraycopy(x114, 5, x284, 3, 1); System.arraycopy(x115, 5, x285, 3, 1) }
Call HotSpotMethod<GenSeqLike$class.$init$> - (Lscala/collection/GenSeqLike;)V
val x287 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenSeqLike$class.$init$> - (Lscala/collection/GenSeqLike;)V
val x288 = Arrays.fill(x284, null)
} // *** end block 0
val x289 = returnValue
val x290 = block_77()
def block_77() { // *** begin block 77
77: aload_0
val x291 = x114(3)
val x292 = x114(5) = x291
78: invokestatic
val x293 = new Array[Object](4)
val x294 = new Array[Long](4)
val x295 = { System.arraycopy(x114, 5, x293, 3, 1); System.arraycopy(x115, 5, x294, 3, 1) }
Call HotSpotMethod<GenSeq$class.$init$> - (Lscala/collection/GenSeq;)V
val x296 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<GenSeq$class.$init$> - (Lscala/collection/GenSeq;)V
val x297 = Arrays.fill(x293, null)
} // *** end block 0
val x298 = returnValue
val x299 = block_81()
def block_81() { // *** begin block 81
81: aload_0
val x300 = x114(3)
val x301 = x114(5) = x300
82: invokestatic
val x302 = new Array[Object](4)
val x303 = new Array[Long](4)
val x304 = { System.arraycopy(x114, 5, x302, 3, 1); System.arraycopy(x115, 5, x303, 3, 1) }
Call HotSpotMethod<SeqLike$class.$init$> - (Lscala/collection/SeqLike;)V
val x305 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<SeqLike$class.$init$> - (Lscala/collection/SeqLike;)V
val x306 = Arrays.fill(x302, null)
} // *** end block 0
val x307 = returnValue
val x308 = block_85()
def block_85() { // *** begin block 85
85: aload_0
val x309 = x114(3)
val x310 = x114(5) = x309
86: invokestatic
val x311 = new Array[Object](4)
val x312 = new Array[Long](4)
val x313 = { System.arraycopy(x114, 5, x311, 3, 1); System.arraycopy(x115, 5, x312, 3, 1) }
Call HotSpotMethod<Seq$class.$init$> - (Lscala/collection/Seq;)V
val x314 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Seq$class.$init$> - (Lscala/collection/Seq;)V
val x315 = Arrays.fill(x311, null)
} // *** end block 0
val x316 = returnValue
val x317 = block_89()
def block_89() { // *** begin block 89
89: aload_0
val x318 = x114(3)
val x319 = x114(5) = x318
90: invokestatic
val x320 = new Array[Object](4)
val x321 = new Array[Long](4)
val x322 = { System.arraycopy(x114, 5, x320, 3, 1); System.arraycopy(x115, 5, x321, 3, 1) }
Call HotSpotMethod<Cloneable$class.$init$> - (Lscala/collection/mutable/Cloneable;)V
val x323 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Cloneable$class.$init$> - (Lscala/collection/mutable/Cloneable;)V
val x324 = Arrays.fill(x320, null)
} // *** end block 0
val x325 = returnValue
val x326 = block_93()
def block_93() { // *** begin block 93
93: aload_0
val x327 = x114(3)
val x328 = x114(5) = x327
94: invokestatic
val x329 = new Array[Object](4)
val x330 = new Array[Long](4)
val x331 = { System.arraycopy(x114, 5, x329, 3, 1); System.arraycopy(x115, 5, x330, 3, 1) }
Call HotSpotMethod<SeqLike$class.$init$> - (Lscala/collection/mutable/SeqLike;)V
val x332 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<SeqLike$class.$init$> - (Lscala/collection/mutable/SeqLike;)V
val x333 = Arrays.fill(x329, null)
} // *** end block 0
val x334 = returnValue
val x335 = block_97()
def block_97() { // *** begin block 97
97: aload_0
val x336 = x114(3)
val x337 = x114(5) = x336
98: invokestatic
val x338 = new Array[Object](4)
val x339 = new Array[Long](4)
val x340 = { System.arraycopy(x114, 5, x338, 3, 1); System.arraycopy(x115, 5, x339, 3, 1) }
Call HotSpotMethod<Seq$class.$init$> - (Lscala/collection/mutable/Seq;)V
val x341 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Seq$class.$init$> - (Lscala/collection/mutable/Seq;)V
val x342 = Arrays.fill(x338, null)
} // *** end block 0
val x343 = returnValue
val x344 = block_101()
def block_101() { // *** begin block 101
101: aload_0
val x345 = x114(3)
val x346 = x114(5) = x345
102: invokestatic
val x347 = new Array[Object](4)
val x348 = new Array[Long](4)
val x349 = { System.arraycopy(x114, 5, x347, 3, 1); System.arraycopy(x115, 5, x348, 3, 1) }
Call HotSpotMethod<IndexedSeqLike$class.$init$> - (Lscala/collection/IndexedSeqLike;)V
val x350 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<IndexedSeqLike$class.$init$> - (Lscala/collection/IndexedSeqLike;)V
val x351 = Arrays.fill(x347, null)
} // *** end block 0
val x352 = returnValue
val x353 = block_105()
def block_105() { // *** begin block 105
105: aload_0
val x354 = x114(3)
val x355 = x114(5) = x354
106: invokestatic
val x356 = new Array[Object](4)
val x357 = new Array[Long](4)
val x358 = { System.arraycopy(x114, 5, x356, 3, 1); System.arraycopy(x115, 5, x357, 3, 1) }
Call HotSpotMethod<IndexedSeq$class.$init$> - (Lscala/collection/IndexedSeq;)V
val x359 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<IndexedSeq$class.$init$> - (Lscala/collection/IndexedSeq;)V
val x360 = Arrays.fill(x356, null)
} // *** end block 0
val x361 = returnValue
val x362 = block_109()
def block_109() { // *** begin block 109
109: aload_0
val x363 = x114(3)
val x364 = x114(5) = x363
110: invokestatic
val x365 = new Array[Object](4)
val x366 = new Array[Long](4)
val x367 = { System.arraycopy(x114, 5, x365, 3, 1); System.arraycopy(x115, 5, x366, 3, 1) }
Call HotSpotMethod<IndexedSeqLike$class.$init$> - (Lscala/collection/mutable/IndexedSeqLike;)V
val x368 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<IndexedSeqLike$class.$init$> - (Lscala/collection/mutable/IndexedSeqLike;)V
val x369 = Arrays.fill(x365, null)
} // *** end block 0
val x370 = returnValue
val x371 = block_113()
def block_113() { // *** begin block 113
113: aload_0
val x372 = x114(3)
val x373 = x114(5) = x372
114: invokestatic
val x374 = new Array[Object](4)
val x375 = new Array[Long](4)
val x376 = { System.arraycopy(x114, 5, x374, 3, 1); System.arraycopy(x115, 5, x375, 3, 1) }
Call HotSpotMethod<IndexedSeq$class.$init$> - (Lscala/collection/mutable/IndexedSeq;)V
val x377 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<IndexedSeq$class.$init$> - (Lscala/collection/mutable/IndexedSeq;)V
val x378 = Arrays.fill(x374, null)
} // *** end block 0
val x379 = returnValue
val x380 = block_117()
def block_117() { // *** begin block 117
117: aload_0
val x381 = x114(3)
val x382 = x114(5) = x381
118: invokestatic
val x383 = new Array[Object](4)
val x384 = new Array[Long](4)
val x385 = { System.arraycopy(x114, 5, x383, 3, 1); System.arraycopy(x115, 5, x384, 3, 1) }
Call HotSpotMethod<IndexedSeqOptimized$class.$init$> - (Lscala/collection/IndexedSeqOptimized;)V
val x386 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<IndexedSeqOptimized$class.$init$> - (Lscala/collection/IndexedSeqOptimized;)V
val x387 = Arrays.fill(x383, null)
} // *** end block 0
val x388 = returnValue
val x389 = block_121()
def block_121() { // *** begin block 121
121: aload_0
val x390 = x114(3)
val x391 = x114(5) = x390
122: invokestatic
val x392 = new Array[Object](4)
val x393 = new Array[Long](4)
val x394 = { System.arraycopy(x114, 5, x392, 3, 1); System.arraycopy(x115, 5, x393, 3, 1) }
Call HotSpotMethod<Ordered$class.$init$> - (Lscala/math/Ordered;)V
val x395 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Ordered$class.$init$> - (Lscala/math/Ordered;)V
val x396 = Arrays.fill(x392, null)
} // *** end block 0
val x397 = returnValue
val x398 = block_125()
def block_125() { // *** begin block 125
125: aload_0
val x399 = x114(3)
val x400 = x114(5) = x399
126: invokestatic
val x401 = new Array[Object](4)
val x402 = new Array[Long](4)
val x403 = { System.arraycopy(x114, 5, x401, 3, 1); System.arraycopy(x115, 5, x402, 3, 1) }
Call HotSpotMethod<StringLike$class.$init$> - (Lscala/collection/immutable/StringLike;)V
val x404 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<StringLike$class.$init$> - (Lscala/collection/immutable/StringLike;)V
val x405 = Arrays.fill(x401, null)
} // *** end block 0
val x406 = returnValue
val x407 = block_129()
def block_129() { // *** begin block 129
129: aload_0
val x408 = x114(3)
val x409 = x114(5) = x408
130: invokestatic
val x410 = new Array[Object](4)
val x411 = new Array[Long](4)
val x412 = { System.arraycopy(x114, 5, x410, 3, 1); System.arraycopy(x115, 5, x411, 3, 1) }
Call HotSpotMethod<Growable$class.$init$> - (Lscala/collection/generic/Growable;)V
val x413 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Growable$class.$init$> - (Lscala/collection/generic/Growable;)V
val x414 = Arrays.fill(x410, null)
} // *** end block 0
val x415 = returnValue
val x416 = block_133()
def block_133() { // *** begin block 133
133: aload_0
val x417 = x114(3)
val x418 = x114(5) = x417
134: invokestatic
val x419 = new Array[Object](4)
val x420 = new Array[Long](4)
val x421 = { System.arraycopy(x114, 5, x419, 3, 1); System.arraycopy(x115, 5, x420, 3, 1) }
Call HotSpotMethod<Builder$class.$init$> - (Lscala/collection/mutable/Builder;)V
val x422 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Builder$class.$init$> - (Lscala/collection/mutable/Builder;)V
val x423 = Arrays.fill(x419, null)
} // *** end block 0
val x424 = returnValue
val x425 = block_137()
def block_137() { // *** begin block 137
137: return
Ret HotSpotMethod<StringBuilder.<init>> - (Ljava/lang/StringBuilder;)V
val x426 = Arrays.fill(x114, null)
} // *** end block 137
} // *** end block 133
} // *** end block 129
} // *** end block 125
} // *** end block 121
} // *** end block 117
} // *** end block 113
} // *** end block 109
} // *** end block 105
} // *** end block 101
} // *** end block 97
} // *** end block 93
} // *** end block 89
} // *** end block 85
} // *** end block 81
} // *** end block 77
} // *** end block 73
} // *** end block 69
} // *** end block 65
} // *** end block 61
} // *** end block 57
} // *** end block 53
} // *** end block 49
} // *** end block 45
} // *** end block 41
} // *** end block 37
} // *** end block 33
} // *** end block 29
} // *** end block 25
} // *** end block 21
} // *** end block 17
} // *** end block 13
} // *** end block 9
} // *** end block 0
val x427 = returnValue
val x428 = block_21()
def block_21() { // *** begin block 21
21: return
Ret HotSpotMethod<StringBuilder.<init>> - (ILjava/lang/String;)V
val x429 = Arrays.fill(x31, null)
} // *** end block 21
} // *** end block 18
} // *** end block 14
} // *** end block 9
} // *** end block 0
val x430 = returnValue
val x431 = block_9()
def block_9() { // *** begin block 9
9: return
Ret HotSpotMethod<StringBuilder.<init>> - ()V
val x432 = Arrays.fill(x21, null)
} // *** end block 9
} // *** end block 0
val x433 = returnValue
val x434 = block_10()
def block_10() { // *** begin block 10
10: ldc
val x435 = x5(7) = hello: 
12: invokevirtual
val x436 = x5(6)
val x437 = if (x436 == null) throw new NullPointerException() else x436
val x438 = x5(7)
val x439 = Boolean.valueOf x438
val x440 = x5(6)
val x441 = HotSpotMethod<StringBuilder.append>.invoke(x440,x439)
val x442 = x5(6) = x441
val x443 = block_15()
def block_15() { // *** begin block 15
15: iload_1
val x444 = unsafe.getInt(x6,56)
val x445 = unsafe.putInt(x6,80, x444)
16: invokestatic
val x446 = new Array[Object](5)
val x447 = new Array[Long](5)
val x448 = { System.arraycopy(x5, 7, x446, 3, 1); System.arraycopy(x6, 7, x447, 3, 1) }
Call HotSpotMethod<BoxesRunTime.boxToInteger> - (I)Ljava/lang/Integer;
val x449 = block_0()
def block_0() { // *** begin block 0
0: iload_0
val x450 = unsafe.getInt(x447,48)
val x451 = unsafe.putInt(x447,56, x450)
1: invokestatic
val x452 = new Array[Object](7)
val x453 = new Array[Long](7)
val x454 = { System.arraycopy(x446, 4, x452, 3, 1); System.arraycopy(x447, 4, x453, 3, 1) }
Call HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x455 = block_0()
def block_0() { // *** begin block 0
0: getstatic
val x456 = if (null == null) class java.lang.Integer else null
val x457 = unsafe.getBoolean(x456,260)
val x458 = if (x457) {} else {}
val x459 = unsafe.putInt(x453,56, x458)
3: ifne
val x460 = unsafe.getInt(x453,56)
val x846 = if (true) {val x461 = block_22()
def block_22() { // *** begin block 22
22: iload_0
val x462 = unsafe.getInt(x453,48)
val x463 = unsafe.putInt(x453,56, x462)
23: bipush
val x464 = unsafe.putInt(x453,64, -128)
25: if_icmplt
val x465 = unsafe.getInt(x453,64)
val x466 = unsafe.getInt(x453,56)
val x467 = x465 > x466
val x604 = if (x467) {val x468 = block_45()
def block_45() { // *** begin block 45
45: new
val x469 = unsafe.allocateInstance(class java.lang.Integer)
val x470 = x452(4) = x469
48: dup
val x471 = unsafe.getLong(x453,56)
val x472 = x452(4)
val x473 = unsafe.putLong(x453,64, x471)
val x474 = x452(5) = x472
49: iload_0
val x475 = unsafe.getInt(x453,48)
val x476 = unsafe.putInt(x453,72, x475)
50: invokespecial
val x477 = x452(5)
val x478 = if (x477 == null) throw new NullPointerException() else x477
val x479 = new Array[Object](7)
val x480 = new Array[Long](7)
val x481 = { System.arraycopy(x452, 5, x479, 3, 2); System.arraycopy(x453, 5, x480, 3, 2) }
Call HotSpotMethod<Integer.<init>> - (I)V
val x482 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x483 = x479(3)
val x484 = x479(5) = x483
1: invokespecial
val x485 = x479(5)
val x486 = if (x485 == null) throw new NullPointerException() else x485
val x487 = new Array[Object](5)
val x488 = new Array[Long](5)
val x489 = { System.arraycopy(x479, 5, x487, 3, 1); System.arraycopy(x480, 5, x488, 3, 1) }
Call HotSpotMethod<Number.<init>> - ()V
val x490 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x491 = x487(3)
val x492 = x487(4) = x491
1: invokespecial
val x493 = x487(4)
val x494 = if (x493 == null) throw new NullPointerException() else x493
val x495 = new Array[Object](4)
val x496 = new Array[Long](4)
val x497 = { System.arraycopy(x487, 4, x495, 3, 1); System.arraycopy(x488, 4, x496, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x498 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x499 = Arrays.fill(x495, null)
} // *** end block 0
val x500 = returnValue
val x501 = block_4()
def block_4() { // *** begin block 4
4: return
Ret HotSpotMethod<Number.<init>> - ()V
val x502 = Arrays.fill(x487, null)
} // *** end block 4
} // *** end block 0
val x503 = returnValue
val x504 = block_4()
def block_4() { // *** begin block 4
4: aload_0
val x505 = x479(3)
val x506 = x479(5) = x505
5: iload_1
val x507 = unsafe.getInt(x480,56)
val x508 = unsafe.putInt(x480,72, x507)
6: putfield
val x509 = unsafe.getInt(x480,72)
val x510 = x479(5)
val x511 = if (x510 == null) throw new NullPointerException() else x510
val x512 = if (x511 == null) class java.lang.Integer else x511
val x513 = unsafe.putInt(x512,16, x509)
9: return
Ret HotSpotMethod<Integer.<init>> - (I)V
val x514 = Arrays.fill(x479, null)
} // *** end block 4
} // *** end block 0
val x515 = returnValue
val x516 = block_53()
def block_53() { // *** begin block 53
53: areturn
val x517 = x452(4)
val x518 = returnValue = x517
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x519 = Arrays.fill(x452, null)
} // *** end block 53
} // *** end block 45
} else {val x520 = block_28()
def block_28() { // *** begin block 28
28: iload_0
val x521 = unsafe.getInt(x453,48)
val x522 = unsafe.putInt(x453,56, x521)
29: getstatic
val x523 = if (null == null) class java.lang.Integer$IntegerCache else null
val x524 = unsafe.getInt(x523,212)
val x525 = unsafe.putInt(x453,64, x524)
32: if_icmpgt
val x526 = unsafe.getInt(x453,64)
val x527 = unsafe.getInt(x453,56)
val x528 = x526 < x527
val x603 = if (x528) {val x529 = block_45()
def block_45() { // *** begin block 45
45: new
val x530 = unsafe.allocateInstance(class java.lang.Integer)
val x531 = x452(4) = x530
48: dup
val x532 = unsafe.getLong(x453,56)
val x533 = x452(4)
val x534 = unsafe.putLong(x453,64, x532)
val x535 = x452(5) = x533
49: iload_0
val x536 = unsafe.getInt(x453,48)
val x537 = unsafe.putInt(x453,72, x536)
50: invokespecial
val x538 = x452(5)
val x539 = if (x538 == null) throw new NullPointerException() else x538
val x540 = new Array[Object](7)
val x541 = new Array[Long](7)
val x542 = { System.arraycopy(x452, 5, x540, 3, 2); System.arraycopy(x453, 5, x541, 3, 2) }
Call HotSpotMethod<Integer.<init>> - (I)V
val x543 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x544 = x540(3)
val x545 = x540(5) = x544
1: invokespecial
val x546 = x540(5)
val x547 = if (x546 == null) throw new NullPointerException() else x546
val x548 = new Array[Object](5)
val x549 = new Array[Long](5)
val x550 = { System.arraycopy(x540, 5, x548, 3, 1); System.arraycopy(x541, 5, x549, 3, 1) }
Call HotSpotMethod<Number.<init>> - ()V
val x551 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x552 = x548(3)
val x553 = x548(4) = x552
1: invokespecial
val x554 = x548(4)
val x555 = if (x554 == null) throw new NullPointerException() else x554
val x556 = new Array[Object](4)
val x557 = new Array[Long](4)
val x558 = { System.arraycopy(x548, 4, x556, 3, 1); System.arraycopy(x549, 4, x557, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x559 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x560 = Arrays.fill(x556, null)
} // *** end block 0
val x561 = returnValue
val x562 = block_4()
def block_4() { // *** begin block 4
4: return
Ret HotSpotMethod<Number.<init>> - ()V
val x563 = Arrays.fill(x548, null)
} // *** end block 4
} // *** end block 0
val x564 = returnValue
val x565 = block_4()
def block_4() { // *** begin block 4
4: aload_0
val x566 = x540(3)
val x567 = x540(5) = x566
5: iload_1
val x568 = unsafe.getInt(x541,56)
val x569 = unsafe.putInt(x541,72, x568)
6: putfield
val x570 = unsafe.getInt(x541,72)
val x571 = x540(5)
val x572 = if (x571 == null) throw new NullPointerException() else x571
val x573 = if (x572 == null) class java.lang.Integer else x572
val x574 = unsafe.putInt(x573,16, x570)
9: return
Ret HotSpotMethod<Integer.<init>> - (I)V
val x575 = Arrays.fill(x540, null)
} // *** end block 4
} // *** end block 0
val x576 = returnValue
val x577 = block_53()
def block_53() { // *** begin block 53
53: areturn
val x578 = x452(4)
val x579 = returnValue = x578
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x580 = Arrays.fill(x452, null)
} // *** end block 53
} // *** end block 45
} else {val x581 = block_35()
def block_35() { // *** begin block 35
35: getstatic
val x582 = if (null == null) class java.lang.Integer$IntegerCache else null
val x583 = unsafe.getObject(x582,200)
val x584 = x452(4) = x583
38: iload_0
val x585 = unsafe.getInt(x453,48)
val x586 = unsafe.putInt(x453,64, x585)
39: sipush
val x587 = unsafe.putInt(x453,72, 128)
42: iadd
val x588 = unsafe.getInt(x453,72)
val x589 = unsafe.getInt(x453,64)
val x590 = x588 + x589
val x591 = unsafe.putInt(x453,64, x590)
43: aaload
val x592 = unsafe.getInt(x453,64)
val x593 = x592.toLong
val x594 = x452(4)
val x595 = {
        nullCheck(array);
        val typ: ResolvedJavaType = metaProvider.getResolvedJavaType(array.getClass());
        if (!typ.isArrayClass()) {
            throw new ArrayStoreException(array.getClass().getName());
        }
        if (index < 0 || index >= arrayLength(array)) {
            throw new ArrayIndexOutOfBoundsException(index.toInt);
        }
    }
val x596 = 8 * x593
val x597 = 24 + x596
val x598 = unsafe.getObject(x594,x597)
val x599 = x452(4) = x598
44: areturn
val x600 = x452(4)
val x601 = returnValue = x600
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x602 = Arrays.fill(x452, null)
} // *** end block 35
}
} // *** end block 28
}
} // *** end block 22
} else {val x605 = block_6()
def block_6() { // *** begin block 6
6: getstatic
val x606 = if (null == null) class java.lang.Integer$IntegerCache else null
val x607 = unsafe.getInt(x606,212)
val x608 = unsafe.putInt(x453,56, x607)
9: bipush
val x609 = unsafe.putInt(x453,64, 127)
11: if_icmpge
val x610 = unsafe.getInt(x453,64)
val x611 = unsafe.getInt(x453,56)
val x612 = x610 <= x611
val x845 = if (x612) {val x613 = block_22()
def block_22() { // *** begin block 22
22: iload_0
val x614 = unsafe.getInt(x453,48)
val x615 = unsafe.putInt(x453,56, x614)
23: bipush
val x616 = unsafe.putInt(x453,64, -128)
25: if_icmplt
val x617 = unsafe.getInt(x453,64)
val x618 = unsafe.getInt(x453,56)
val x619 = x617 > x618
val x756 = if (x619) {val x620 = block_45()
def block_45() { // *** begin block 45
45: new
val x621 = unsafe.allocateInstance(class java.lang.Integer)
val x622 = x452(4) = x621
48: dup
val x623 = unsafe.getLong(x453,56)
val x624 = x452(4)
val x625 = unsafe.putLong(x453,64, x623)
val x626 = x452(5) = x624
49: iload_0
val x627 = unsafe.getInt(x453,48)
val x628 = unsafe.putInt(x453,72, x627)
50: invokespecial
val x629 = x452(5)
val x630 = if (x629 == null) throw new NullPointerException() else x629
val x631 = new Array[Object](7)
val x632 = new Array[Long](7)
val x633 = { System.arraycopy(x452, 5, x631, 3, 2); System.arraycopy(x453, 5, x632, 3, 2) }
Call HotSpotMethod<Integer.<init>> - (I)V
val x634 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x635 = x631(3)
val x636 = x631(5) = x635
1: invokespecial
val x637 = x631(5)
val x638 = if (x637 == null) throw new NullPointerException() else x637
val x639 = new Array[Object](5)
val x640 = new Array[Long](5)
val x641 = { System.arraycopy(x631, 5, x639, 3, 1); System.arraycopy(x632, 5, x640, 3, 1) }
Call HotSpotMethod<Number.<init>> - ()V
val x642 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x643 = x639(3)
val x644 = x639(4) = x643
1: invokespecial
val x645 = x639(4)
val x646 = if (x645 == null) throw new NullPointerException() else x645
val x647 = new Array[Object](4)
val x648 = new Array[Long](4)
val x649 = { System.arraycopy(x639, 4, x647, 3, 1); System.arraycopy(x640, 4, x648, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x650 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x651 = Arrays.fill(x647, null)
} // *** end block 0
val x652 = returnValue
val x653 = block_4()
def block_4() { // *** begin block 4
4: return
Ret HotSpotMethod<Number.<init>> - ()V
val x654 = Arrays.fill(x639, null)
} // *** end block 4
} // *** end block 0
val x655 = returnValue
val x656 = block_4()
def block_4() { // *** begin block 4
4: aload_0
val x657 = x631(3)
val x658 = x631(5) = x657
5: iload_1
val x659 = unsafe.getInt(x632,56)
val x660 = unsafe.putInt(x632,72, x659)
6: putfield
val x661 = unsafe.getInt(x632,72)
val x662 = x631(5)
val x663 = if (x662 == null) throw new NullPointerException() else x662
val x664 = if (x663 == null) class java.lang.Integer else x663
val x665 = unsafe.putInt(x664,16, x661)
9: return
Ret HotSpotMethod<Integer.<init>> - (I)V
val x666 = Arrays.fill(x631, null)
} // *** end block 4
} // *** end block 0
val x667 = returnValue
val x668 = block_53()
def block_53() { // *** begin block 53
53: areturn
val x669 = x452(4)
val x670 = returnValue = x669
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x671 = Arrays.fill(x452, null)
} // *** end block 53
} // *** end block 45
} else {val x672 = block_28()
def block_28() { // *** begin block 28
28: iload_0
val x673 = unsafe.getInt(x453,48)
val x674 = unsafe.putInt(x453,56, x673)
29: getstatic
val x675 = if (null == null) class java.lang.Integer$IntegerCache else null
val x676 = unsafe.getInt(x675,212)
val x677 = unsafe.putInt(x453,64, x676)
32: if_icmpgt
val x678 = unsafe.getInt(x453,64)
val x679 = unsafe.getInt(x453,56)
val x680 = x678 < x679
val x755 = if (x680) {val x681 = block_45()
def block_45() { // *** begin block 45
45: new
val x682 = unsafe.allocateInstance(class java.lang.Integer)
val x683 = x452(4) = x682
48: dup
val x684 = unsafe.getLong(x453,56)
val x685 = x452(4)
val x686 = unsafe.putLong(x453,64, x684)
val x687 = x452(5) = x685
49: iload_0
val x688 = unsafe.getInt(x453,48)
val x689 = unsafe.putInt(x453,72, x688)
50: invokespecial
val x690 = x452(5)
val x691 = if (x690 == null) throw new NullPointerException() else x690
val x692 = new Array[Object](7)
val x693 = new Array[Long](7)
val x694 = { System.arraycopy(x452, 5, x692, 3, 2); System.arraycopy(x453, 5, x693, 3, 2) }
Call HotSpotMethod<Integer.<init>> - (I)V
val x695 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x696 = x692(3)
val x697 = x692(5) = x696
1: invokespecial
val x698 = x692(5)
val x699 = if (x698 == null) throw new NullPointerException() else x698
val x700 = new Array[Object](5)
val x701 = new Array[Long](5)
val x702 = { System.arraycopy(x692, 5, x700, 3, 1); System.arraycopy(x693, 5, x701, 3, 1) }
Call HotSpotMethod<Number.<init>> - ()V
val x703 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x704 = x700(3)
val x705 = x700(4) = x704
1: invokespecial
val x706 = x700(4)
val x707 = if (x706 == null) throw new NullPointerException() else x706
val x708 = new Array[Object](4)
val x709 = new Array[Long](4)
val x710 = { System.arraycopy(x700, 4, x708, 3, 1); System.arraycopy(x701, 4, x709, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x711 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x712 = Arrays.fill(x708, null)
} // *** end block 0
val x713 = returnValue
val x714 = block_4()
def block_4() { // *** begin block 4
4: return
Ret HotSpotMethod<Number.<init>> - ()V
val x715 = Arrays.fill(x700, null)
} // *** end block 4
} // *** end block 0
val x716 = returnValue
val x717 = block_4()
def block_4() { // *** begin block 4
4: aload_0
val x718 = x692(3)
val x719 = x692(5) = x718
5: iload_1
val x720 = unsafe.getInt(x693,56)
val x721 = unsafe.putInt(x693,72, x720)
6: putfield
val x722 = unsafe.getInt(x693,72)
val x723 = x692(5)
val x724 = if (x723 == null) throw new NullPointerException() else x723
val x725 = if (x724 == null) class java.lang.Integer else x724
val x726 = unsafe.putInt(x725,16, x722)
9: return
Ret HotSpotMethod<Integer.<init>> - (I)V
val x727 = Arrays.fill(x692, null)
} // *** end block 4
} // *** end block 0
val x728 = returnValue
val x729 = block_53()
def block_53() { // *** begin block 53
53: areturn
val x730 = x452(4)
val x731 = returnValue = x730
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x732 = Arrays.fill(x452, null)
} // *** end block 53
} // *** end block 45
} else {val x733 = block_35()
def block_35() { // *** begin block 35
35: getstatic
val x734 = if (null == null) class java.lang.Integer$IntegerCache else null
val x735 = unsafe.getObject(x734,200)
val x736 = x452(4) = x735
38: iload_0
val x737 = unsafe.getInt(x453,48)
val x738 = unsafe.putInt(x453,64, x737)
39: sipush
val x739 = unsafe.putInt(x453,72, 128)
42: iadd
val x740 = unsafe.getInt(x453,72)
val x741 = unsafe.getInt(x453,64)
val x742 = x740 + x741
val x743 = unsafe.putInt(x453,64, x742)
43: aaload
val x744 = unsafe.getInt(x453,64)
val x745 = x744.toLong
val x746 = x452(4)
val x747 = {
        nullCheck(array);
        val typ: ResolvedJavaType = metaProvider.getResolvedJavaType(array.getClass());
        if (!typ.isArrayClass()) {
            throw new ArrayStoreException(array.getClass().getName());
        }
        if (index < 0 || index >= arrayLength(array)) {
            throw new ArrayIndexOutOfBoundsException(index.toInt);
        }
    }
val x748 = 8 * x745
val x749 = 24 + x748
val x750 = unsafe.getObject(x746,x749)
val x751 = x452(4) = x750
44: areturn
val x752 = x452(4)
val x753 = returnValue = x752
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x754 = Arrays.fill(x452, null)
} // *** end block 35
}
} // *** end block 28
}
} // *** end block 22
} else {val x757 = block_14()
def block_14() { // *** begin block 14
14: new
val x758 = unsafe.allocateInstance(class java.lang.AssertionError)
val x759 = x452(4) = x758
17: dup
val x760 = unsafe.getLong(x453,56)
val x761 = x452(4)
val x762 = unsafe.putLong(x453,64, x760)
val x763 = x452(5) = x761
18: invokespecial
val x764 = x452(5)
val x765 = if (x764 == null) throw new NullPointerException() else x764
val x766 = new Array[Object](5)
val x767 = new Array[Long](5)
val x768 = { System.arraycopy(x452, 5, x766, 3, 1); System.arraycopy(x453, 5, x767, 3, 1) }
Call HotSpotMethod<AssertionError.<init>> - ()V
val x769 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x770 = x766(3)
val x771 = x766(4) = x770
1: invokespecial
val x772 = x766(4)
val x773 = if (x772 == null) throw new NullPointerException() else x772
val x774 = new Array[Object](5)
val x775 = new Array[Long](5)
val x776 = { System.arraycopy(x766, 4, x774, 3, 1); System.arraycopy(x767, 4, x775, 3, 1) }
Call HotSpotMethod<Error.<init>> - ()V
val x777 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x778 = x774(3)
val x779 = x774(4) = x778
1: invokespecial
val x780 = x774(4)
val x781 = if (x780 == null) throw new NullPointerException() else x780
val x782 = new Array[Object](6)
val x783 = new Array[Long](6)
val x784 = { System.arraycopy(x774, 4, x782, 3, 1); System.arraycopy(x775, 4, x783, 3, 1) }
Call HotSpotMethod<Throwable.<init>> - ()V
val x785 = block_0()
def block_0() { // *** begin block 0
0: aload_0
val x786 = x782(3)
val x787 = x782(4) = x786
1: invokespecial
val x788 = x782(4)
val x789 = if (x788 == null) throw new NullPointerException() else x788
val x790 = new Array[Object](4)
val x791 = new Array[Long](4)
val x792 = { System.arraycopy(x782, 4, x790, 3, 1); System.arraycopy(x783, 4, x791, 3, 1) }
Call HotSpotMethod<Object.<init>> - ()V
val x793 = block_0()
def block_0() { // *** begin block 0
0: return
Ret HotSpotMethod<Object.<init>> - ()V
val x794 = Arrays.fill(x790, null)
} // *** end block 0
val x795 = returnValue
val x796 = block_4()
def block_4() { // *** begin block 4
4: aload_0
val x797 = x782(3)
val x798 = x782(4) = x797
5: aload_0
val x799 = x782(3)
val x800 = x782(5) = x799
6: putfield
val x801 = x782(5)
val x802 = x782(4)
val x803 = if (x802 == null) throw new NullPointerException() else x802
val x804 = if (x803 == null) class java.lang.Throwable else x803
val x805 = unsafe.putObject(x804,32, x801)
9: aload_0
val x806 = x782(3)
val x807 = x782(4) = x806
10: getstatic
val x808 = if (null == null) class java.lang.Throwable else null
val x809 = unsafe.getObject(x808,200)
val x810 = x782(5) = x809
13: putfield
val x811 = x782(5)
val x812 = x782(4)
val x813 = if (x812 == null) throw new NullPointerException() else x812
val x814 = if (x813 == null) class java.lang.Throwable else x813
val x815 = unsafe.putObject(x814,40, x811)
16: aload_0
val x816 = x782(3)
val x817 = x782(4) = x816
17: getstatic
val x818 = if (null == null) class java.lang.Throwable else null
val x819 = unsafe.getObject(x818,208)
val x820 = x782(5) = x819
20: putfield
val x821 = x782(5)
val x822 = x782(4)
val x823 = if (x822 == null) throw new NullPointerException() else x822
val x824 = if (x823 == null) class java.lang.Throwable else x823
val x825 = unsafe.putObject(x824,48, x821)
23: aload_0
val x826 = x782(3)
val x827 = x782(4) = x826
24: invokevirtual
val x828 = x782(4)
val x829 = if (x828 == null) throw new NullPointerException() else x828
val x830 = x782(4)
val x831 = HotSpotMethod<Throwable.fillInStackTrace>.invoke(x830)
val x832 = x782(4) = x831
val x833 = block_27()
def block_27() { // *** begin block 27
27: pop
28: return
Ret HotSpotMethod<Throwable.<init>> - ()V
val x834 = Arrays.fill(x782, null)
} // *** end block 27
} // *** end block 4
} // *** end block 0
val x835 = returnValue
val x836 = block_4()
def block_4() { // *** begin block 4
4: return
Ret HotSpotMethod<Error.<init>> - ()V
val x837 = Arrays.fill(x774, null)
} // *** end block 4
} // *** end block 0
val x838 = returnValue
val x839 = block_4()
def block_4() { // *** begin block 4
4: return
Ret HotSpotMethod<AssertionError.<init>> - ()V
val x840 = Arrays.fill(x766, null)
} // *** end block 4
} // *** end block 0
val x841 = returnValue
val x842 = block_21()
def block_21() { // *** begin block 21
21: athrow
val x843 = x452(4)
Ret HotSpotMethod<Integer.valueOf> - (I)Ljava/lang/Integer;
val x844 = Arrays.fill(x452, null)
} // *** end block 21
} // *** end block 14
}
} // *** end block 6
}
} // *** end block 0
val x847 = returnValue
val x848 = x446(4) = x847
val x849 = block_4()
def block_4() { // *** begin block 4
4: areturn
val x850 = x446(4)
val x851 = returnValue = x850
Ret HotSpotMethod<BoxesRunTime.boxToInteger> - (I)Ljava/lang/Integer;
val x852 = Arrays.fill(x446, null)
} // *** end block 4
} // *** end block 0
val x853 = returnValue
val x854 = x5(7) = x853
val x855 = block_19()
def block_19() { // *** begin block 19
19: invokevirtual
val x856 = x5(6)
val x857 = if (x856 == null) throw new NullPointerException() else x856
val x858 = x5(7)
val x859 = Boolean.valueOf x858
val x860 = x5(6)
val x861 = HotSpotMethod<StringBuilder.append>.invoke(x860,x859)
val x862 = x5(6) = x861
val x863 = block_22()
def block_22() { // *** begin block 22
22: invokevirtual
val x864 = x5(6)
val x865 = if (x864 == null) throw new NullPointerException() else x864
val x866 = x5(6)
val x867 = HotSpotMethod<StringBuilder.toString>.invoke(x866)
val x868 = x5(6) = x867
val x869 = block_25()
def block_25() { // *** begin block 25
25: invokevirtual
val x870 = x5(5)
val x871 = if (x870 == null) throw new NullPointerException() else x870
val x872 = x5(6)
val x873 = Boolean.valueOf x872
val x874 = x5(5)
val x875 = HotSpotMethod<Predef$.println>.invoke(x874,x873)
val x876 = block_28()
def block_28() { // *** begin block 28
28: return
Ret HotSpotMethod<Test1$$anonfun$testB$1$Foo$2.bar> - (I)V
val x877 = Arrays.fill(x5, null)
} // *** end block 28
} // *** end block 25
} // *** end block 22
} // *** end block 19
} // *** end block 15
} // *** end block 10
} // *** end block 0
